use-standard-lifecycle

use namespace="System"
use namespace="System.IO"
use import="Files"

var version='0.3.5'
var authors='Gate contributors'

var baseDir='${Directory.GetCurrentDirectory()}'
var targetDir='${Path.Combine(baseDir, "target")}'
var buildDir='${Path.Combine(targetDir, "build")}'
var testDir='${Path.Combine(targetDir, "test")}'
var packageDir='${Path.Combine(targetDir, "package")}'

var homeDir='${Environment.GetEnvironmentVariable("HOME")}'
set homeDir='${Environment.GetEnvironmentVariable("HOMEDRIVE") + Environment.GetEnvironmentVariable("HOMEPATH")}' if='string.IsNullOrEmpty(homeDir)'

var appProjects = '${Files.Include("src/Main/**/*.*sproj", "src/Hosts/**/*.*sproj", "src/Adapters/**/*.*sproj").Exclude("src/**/*Adapters.AspNetWebApi.*")}'
var testProjects = '${Files.Include("src/Tests/**/*.*sproj")}'
var testAssemblies = '${Files.Include("target/test/*.Tests.dll").Exclude("target/test/*.HttpListener.Tests.dll")}'

-// Odd compiler error from this project - need to figure that out
set appProjects = '${appProjects.Exclude("src/**/*.AspNetWebApi.csproj")}' if='IsMono'
set testProjects = '${testProjects.Exclude("src/**/*.AspNetWebApi.csproj")}' if='IsMono'

#delete-target target='clean'
  @{
    if (Directory.Exists(targetDir))
    {
        Log.Info("Deleting " + targetDir);
        Directory.Delete(targetDir, true);
    }
  }

#apply-version target='initialize'
  assemblyinfo each='var assemblyFile in Files.Include("src/**/AssemblyInfo.cs")' assemblyVersion='${version}'

#install-packages target='initialize'
  for each='var file in Files.Include("**/packages.config")'
    exec-clr program='.nuget/NuGet.exe' commandline='install ${file} -o packages'

#build-app target='compile'
  build each='var projectFile in appProjects' configuration='Release' outputDir='${buildDir}'

#build-tests target='test-compile'
  build each='var projectFile in testProjects' configuration='Debug' outputDir='${testDir}'

#run-tests target='test'
  nunit each='var testFile in testAssemblies'

#package-nuget target='package'
  copy sourceDir='src/Deploy' outputDir='target/build' overwrite='${true}'
  for each='var file in Files.BasePath(buildDir).Include("*.nuspec")'
    var baseName='${Path.GetFileNameWithoutExtension(file)}'
    nuget-pack nuspecFile='${file}' workingdir='${buildDir}' extra='-Properties "id=${baseName};authors=${authors}"'

#install-nuget target='install'
  copy sourceDir='${buildDir}' include='*.nupkg' outputDir='${Path.Combine(homeDir, ".nuget")}' overwrite='${true}'

